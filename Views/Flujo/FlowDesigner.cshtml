@model ExpediFlow.Models.Flujo

@{
    ViewData["Title"] = "FlowDesigner";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .btn-warning-outline.custom-hover:hover {
        color: cornflowerblue; 
    }
</style>
<!-- Incluir SweetAlert2 CSS y JS -->
<link rel="stylesheet" href="~/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
<script src="~/plugins/sweetalert2/sweetalert2.min.js"></script>

<div class="container-fluid">
    <div class="card card-primary mx-auto w-60">
        <div class="card-header d-flex align-items-center" style="background-color: var(--blue);">
            <h3 class="card-title">Flow Designer: @Html.DisplayFor(model => model.NombreFlujo)</h3>
            <div class="btn-group ms-auto">
                <a asp-action="Edit" asp-route-id="@Model.IdFlujo" type="submit" class="btn btn-primary">Guardar</a>
                <a asp-action="Index" class="btn btn-secondary">Regresar a la Lista</a>
            </div>
        </div>
        <div class="card-body">
            <div class="modal fade modal-lg" id="myModal" tabindex="-1" aria-labelledby="Modal Add/Edit" aria-hidden="true">
            </div>
            <div class="card bg-success bg-opacity-25 mb-3 mx-auto w-50">
                <div class="card-body text-center">
                    <h5 class="card-title">Inicio</h5>
                    <p class="card-text">Estado: @Model.IdEstadoInicialNavigation.NombreEstado</p>
                </div>
            </div>
            @if (Model.FlujoBloques.Count == 0)
            {
                <div class="text-center m-0">
                    <div class="btn-group-vertical" role="group">
                        <button type="button" id="btnBloque0" class="btn btn-warning-outline custom-hover" title="Crear un Nuevo Bloque" data-bs-toggle="modal" onclick="CrearBloque(@Model.IdFlujo)">
                            <i class="fa fa-plus-circle"></i>
                        </button>
                    </div>
                </div>
            }
            <div class="text-center">
                <i class="fa fa-arrow-down fs-4 text-primary"></i>
            </div>
            
            @foreach (var block in Model.FlujoBloques)
            {
                <div class="card card-info card-outline mx-auto w-50 m-0" style="background-color: azure">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-0">@block.NombreBloque</h5>
                            <small>
                                <span class="fw-bold">Unidad:</span> @block.IdUnidadNavigation.NombreUnidad |
                                <span class="fw-bold">Estado Inicial:</span> @block.IdEstadoInicialNavigation.NombreEstado
                            </small>
                        </div>

                        <div class="ms-auto d-flex gap-2">
                            <button type="button" class="btn btn-outline-primary btn-sm" onclick="EditarBloque(@block.IdBloque)">
                                <i class="fa fa-pencil"></i>
                            </button>
                            <button type="button" class="btn btn-outline-danger btn-sm"
                                    onclick="eliminarBloque(@block.IdBloque,'@block.NombreBloque');">
                                <i class="fa fa-remove"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <h6 class="card-subtitle mb-2">Posibles Estados:</h6>
                        <ul class="list-group">
                            @foreach (var state in block.FlujoTransicions)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <a class="">
                                            @if (state.Recibir)
                                            {
                                                <i class="fa fa-arrow-down" aria-hidden="true"></i>
                                            }
                                            @if (state.Enviar)
                                            {
                                                <i class="fa fa-arrow-up" aria-hidden="true"></i>
                                            }
                                    
                                            &nbsp; @state.IdEstadoFinalNavigation.NombreEstado
                                    </a>
                                    <button type="button" class="btn btn-outline-danger btn-sm"
                                            onclick="deleteEstado(@state.IdTransicion, '@state.IdEstadoFinalNavigation.NombreEstado')">
                                        <i class="fa fa-remove"></i>
                                    </button>
                                   
                                </li>

                            }
                        </ul>
                        <div class="mt-3">
                            <div class="input-group-prepend">
                                <div class="col">
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text" style="background-color: lightgreen;">
                                                <input type="checkbox" id="recibir_@block.IdBloque"><i class="fa fa-arrow-down"></i>
                                            </span>
                                            <span class="input-group-text" style="background-color: lightyellow;">
                                                <input type="checkbox" id="enviar_@block.IdBloque"><i class="fa fa-arrow-up"></i>
                                            </span>
                                        </div>
                                      
                                        <select class="form-control select2bs4" id="newState_@block.IdBloque" asp-items="ViewBag.IdEstado">
                                            <option value="">Nuevo Estado Posible</option>
                                        </select>
                                        <button class="btn btn-primary" type="button"
                                                onclick="addEstado(@block.IdBloque)">
                                            Agregar Estado
                                        </button>
                                    </div>
                                </div>
                              
                            </div>
                        </div>
                    </div>
                </div>
                <div class="text-center m-0">
                    <div class="btn-group-vertical" role="group">
                        <button type="button" class="btn btn-warning-outline custom-hover" data-bs-toggle="modal" title="Insertar Bloque" onclick="CrearBloque(@Model.IdFlujo,@block.Orden)">
                            <i class="fa fa-plus-circle"></i>
                        </button>
                        <button type="button" class="btn btn-primary-outline" >
                            <i class="fa fa-arrow-down fs-4 text-primary"></i>
                        </button>
                    </div>
                </div>
                
            }
            
            <div class="card bg-danger bg-opacity-25 mx-auto w-50">
                <div class="card-body text-center">
                    <h5 class="card-title">Fin</h5>
                    <p class="card-text">Estado: @Model.IdEstadoFinalNavigation.NombreEstado</p>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <a asp-action="Edit" asp-route-id="@Model.IdFlujo" type="submit" class="btn btn-primary" style="background-color: var(--blue);">Guardar</a>
            <a asp-action="Index" class="btn btn-secondary">Regresar a la Lista</a>
        </div>
    </div>
</div>



<script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function() {
    // Tu código para inicializar el modal
        });

        // Para crear un nuevo bloque
        function CrearBloque(flujoId,Orden) {
            $.get(`/Flujo/CrearBloque?flujoId=${flujoId}&posicion=${Orden}`, function (data) {
                $('#myModal').html(data); // Cargar la vista parcial en el modal
                $('#myModal').modal('show'); // Mostrar el modal
            });
        }

        // Para editar un bloque existente
        function EditarBloque(bloqueId) {
            $.get(`/Flujo/EditarBloque?id=${bloqueId}`, function (data) {
                $('#myModal').html(data); // Cargar la vista parcial en el modal
                $('#myModal').modal('show'); // Mostrar el modal
            });
        }
        // Para guardar cambios en el bloque
        function saveBlockChanges() {
            var form = $('#createBlockForm');
            $.post('/Flujo/CrearBloque', form.serialize(), function (result) {
                if (result.success) {
                    $('#myModal').modal('hide');
                    location.reload(); // Recargar la página o actualizar la lista de bloques
                } else {
                    alert('Error al crear el bloque');
                }
            });
        }
        function editBlockChanges() {
            var form = $('#editBlockForm');
            $.post('/Flujo/EditarBloque', form.serialize(), function (result) {
                if (result.success) {
                    $('#MyModal').modal('hide');
                    location.reload(); 
                } else {
                    alert('Error al crear el bloque');
                }
            });
        }
              
        async function eliminarBloque(idBloque, nombreBloque) {
                const result = await Swal.fire({
                    title: `¿Está seguro de que desea eliminar este bloque?`,
                    text: `${nombreBloque}`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Sí, eliminar!',
                    cancelButtonText: 'Cancelar'
                });    
                 if (result.isConfirmed) {
                try {
                    const response = await fetch(`/Flujo/DeleteBloque?idBloque=${idBloque}`, {
                        method: 'POST'
                    });

                    if (response.ok) {
                        location.reload();
                    }
                    } catch (error) {
                        console.error('Error:', error);
                    }
                 }
        }

    async function addEstado(blockId) {
        const input = document.getElementById(`newState_${blockId}`);
        const enviar = document.getElementById(`enviar_${blockId}`).checked;
        const recibir = document.getElementById(`recibir_${blockId}`).checked;

        const data = {
            blockId: blockId,
            idNuevoEstado: parseInt(input.value),
            enviar: enviar,  
            recibir: recibir 
        };

        try {
            const response = await fetch(`/Flujo/AddEstado`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                location.reload();
            } else {
                console.error('Error en la respuesta:', response.statusText);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }
    async function deleteEstado(idFlujoTransicion,nombreEstado) {
                    const result = await Swal.fire({
                        title: `¿Está seguro de que desea eliminar el estado?`,
                        text: `${nombreEstado}`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Sí, eliminar!',
                        cancelButtonText: 'Cancelar'
                    });
                        if (result.isConfirmed) {
                            try {
                            $.ajax({
                                url: '/Flujo/DeleteEstado', // URL base sin parámetro
                                type: 'POST',
                                data: { idFlujoTransicion: idFlujoTransicion }, // Parámetro directamente en data
                                success: function (response) {
                                    if (response.success) {
                                        location.reload();
                                    } else {
                                        console.error('Error: operación no completada.');
                                    }
                                },
                                error: function (xhr, status, error) {
                                    console.error('Error:', error);
                                }
                            });
                            } catch (error) {
                                console.error('Error:', error);
                            }
                        }
    }

    </script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}